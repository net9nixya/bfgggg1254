import importlib
from assets.logger import check_log_size
from commands.admin.module_manager import load_modules
from aiogram import executor
from assets.auto import automatisation
from commands.basic.ore.db import autokursbtc_new
from bot import dp
import sqlite3
from aiogram import types
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor


MODULES = [
    'commands.basic.property.main',
    'commands.admin.admin',
    'commands.admin.module_manager',
    'commands.admin.promo',
    'commands.admin.updater',
    'commands.admin.text_command',
    'commands.entertaining.earnings.farm.main',
    'commands.entertaining.earnings.business.main',
    'commands.entertaining.earnings.garden.main',
    'commands.entertaining.earnings.generator.main',
    'commands.entertaining.earnings.tree.main',
    'commands.entertaining.earnings.quarry.main',
    'commands.basic.balance',
    'commands.basic.status.main',
    'commands.basic.ore.main',
    'commands.help',
    'commands.entertaining.rz',
    'commands.basic.top',
    'commands.entertaining.wedlock',
    'commands.clans.main',
    'commands.games.main',
    'commands.basic.bank.main',
    'commands.entertaining.case.main',
    'commands.entertaining.earnings.garden.potions',
    'commands.basic.transfer',
    'commands.basic.rpmod',
    'commands.main',
    'commands.moderation',
]


async def main(dp):
    load_modules(dp)
    reg_handlers()
    await autokursbtc_new()
    await automatisation()


def reg_handlers():
    for module_path in MODULES:
        module = importlib.import_module(module_path)
        if hasattr(module, 'reg'):
            module.reg(dp)
      
@dp.message_handler(lambda message: message.text.lower() == "–ø1")
async def rules_1(message: Message):
    await message.answer("üìú <i>–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 1: üö´ –ü–æ–ª–∏—Ç–∏–∫–∞, —Ä–∞—Å–∏–∑–º –∑–∞–ø—Ä–µ—â–µ–Ω—ã. (–º—É—Ç 10 –º–∏–Ω—É—Ç)</i>")

@dp.message_handler(lambda message: message.text.lower() == "–ø2")
async def rules_2(message: Message):
    await message.answer("üìú <i>–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 2: ‚ùå –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∑–∞–ø—Ä–µ—â–µ–Ω–æ. (–±–∞–Ω)</i>")

@dp.message_handler(lambda message: message.text.lower() == "–ø3")
async def rules_3(message: Message):
    await message.answer("üìú <i>–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 3: üîû –ö–æ–Ω—Ç–µ–Ω—Ç 18+, –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è, —Ä–∞—Å—á–ª–µ–Ω—ë–Ω–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–æ. (–º—É—Ç 1 —á–∞—Å)</i>")

@dp.message_handler(lambda message: message.text.lower() == "–ø4")
async def rules_4(message: Message):
    await message.answer("üìú <i>–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 4: üö´ –°–ø–∞–º –∏ —Ñ–ª—É–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â—ë–Ω. (–º—É—Ç 30 –º–∏–Ω—É—Ç)</i>")

@dp.message_handler(lambda message: message.text.lower() == "–ø5")
async def rules_5(message: Message):
    await message.answer("üìú <i>–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 5: üö´ –ù–µ —Ä–∞–∑–≤–æ–¥–∏—Ç—å —Å—Ä–∞—á –≤ —á–∞—Ç–µ, –∏–Ω–∞—á–µ –±–µ–∑ —Ä–∞–∑–±–æ—Ä–∞ –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±—É–¥—É—Ç –Ω–∞–∫–∞–∑–∞–Ω—ã. (–ù–∞–∫–∞–∑–∞–Ω–∏–µ –ø–æ —Ä–µ—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞ –∏ –æ—Ç —Ç—è–∂–µ—Å—Ç–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞)</i>")

@dp.message_handler(lambda message: message.text.lower() == "–ø6")
async def rules_6(message: Message):
    await message.answer("üìú <i>–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 6: üö´ –õ—é–±–∞—è —Ä–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞. (–ë–∞–Ω –Ω–∞ –≤—Å–µ–≥–¥–∞)</i>")

@dp.message_handler(lambda message: message.text.lower() == "–ø7")
async def rules_7(message: Message):
    await message.answer("üìú <i>–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 7: ‚õîÔ∏è –ù–∏–∫–∏/—Å—Ç–∏–∫–µ—Ä—ã/—Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∫—Ä–∞—à–∞—Ç —Ç–µ–ª–µ–≥—Ä–∞–º, —ç–ø–∏–ª–µ–ø—Å–∏—è, –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª –≥–¥–µ –≥—Ä–æ–º–∫–∏–π –∑–≤—É–∫, —Å–∫—Ä–∏–º–µ—Ä. (–º—É—Ç 3 —á–∞—Å–∞)</i>")

@dp.message_handler(lambda message: message.text.lower() == "–ø8")
async def rules_8(message: Message):
    await message.answer("üìú <i>–ü—É–Ω–∫—Ç –ø—Ä–∞–≤–∏–ª 8: ‚ùå –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–∞—Ç—å –∏ –ø—Ä–æ—Å–∏—Ç—å –≤ –¥–æ–ª–≥ –∑–∞–ø—Ä–µ—â–µ–Ω–æ. (–º—É—Ç 1 —á–∞—Å)</i>")

@dp.message_handler(lambda message: message.text.lower() == "–ø9")
async def rules_9(message: Message):
    await message.answer("üìú <i>‚ÄºÔ∏è –í–ª–∞–¥–µ–ª–µ—Ü –∏ –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏ –≥—Ä—É–ø–ø—ã –≤–ø—Ä–∞–≤–µ –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∏—á–∏–Ω—É, –∞ —Ç–∞–∫ –∂–µ –≤—Ä–µ–º—è –Ω–∞–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ –±–µ–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∂–∞–ª–æ–±—É.</i>")

@dp.message_handler(lambda message: message.text.lower() == "–ø10")
async def rules_10(message: Message):
    await message.answer("üìú <i>‚ÄºÔ∏èP.s. –ø–æ –ø–æ–≤–æ–¥—É —Ä–µ–∫–ª–∞–º—ã, —Ä–∞–∑–±–∞–Ω–∞ –ø–∏—à–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é.</i>")



if __name__ == '__main__':
    executor.start_polling(dp, on_startup=main, skip_updates=True)
